#!/usr/bin/env node
import "./_dnt.polyfills.js";
import * as dntShim from "./_dnt.shims.js";
import { join } from "./deps/deno.land/std@0.189.0/path/mod.js";
import { Changelog, parser, Release } from "./mod.js";
import { parse as parseFlag } from "./deps/deno.land/std@0.189.0/flags/mod.js";
import { parse as parseIni } from "./deps/deno.land/x/ini@v2.1.0/mod.js";
import getSettingsForURL from "./src/settings.js";
const argv = parseFlag(dntShim.Deno.args, {
    default: {
        file: "CHANGELOG.md",
        format: "compact",
        release: null,
        create: null,
        url: null,
        https: true,
        quiet: false,
        head: null,
    },
    string: ["file", "format", "url", "head"],
    boolean: ["https", "init", "latest-release", "quiet"],
});
const file = join(dntShim.Deno.cwd(), argv.file);
try {
    if (argv.init) {
        const changelog = new Changelog("Changelog").addRelease(new Release("0.1.0", new Date(), "First version"));
        changelog.format = argv.format;
        save(file, changelog, true);
        dntShim.Deno.exit(0);
    }
    const changelog = parser(dntShim.Deno.readTextFileSync(file));
    changelog.format = argv.format;
    if (argv["latest-release"]) {
        const release = changelog.releases.find((release) => release.date && release.version);
        if (release) {
            console.log(release.version?.toString());
        }
        dntShim.Deno.exit(0);
    }
    if (argv.release) {
        const release = changelog.releases.find((release) => {
            if (release.date) {
                return false;
            }
            if (typeof argv.release === "string") {
                return !release.version || argv.release === release.version.toString();
            }
            return !!release.version;
        });
        if (release) {
            release.date = new Date();
            if (typeof argv.release === "string") {
                release.setVersion(argv.release);
            }
        }
        else {
            console.error("Not found any valid unreleased version");
            dntShim.Deno.exit(1);
        }
    }
    if (argv.create) {
        const version = typeof argv.create === "string" ? argv.create : undefined;
        changelog.addRelease(new Release(version));
    }
    save(file, changelog);
}
catch (err) {
    console.error(red(err.message));
    if (!argv.quiet) {
        dntShim.Deno.exit(1);
    }
}
function save(file, changelog, isNew = false) {
    changelog.url = argv.url || changelog.url || getRemoteUrl(argv.https);
    if (!changelog.url) {
        console.error(red('Please, set the repository url with --url="https://github.com/username/repository"'));
        changelog.url = "https://example.com";
    }
    if (changelog.url) {
        const settings = getSettingsForURL(changelog.url);
        if (settings) {
            changelog.head = settings.head;
            changelog.tagLinkBuilder = settings.tagLink;
        }
    }
    if (argv.head) {
        changelog.head = argv.head;
    }
    dntShim.Deno.writeTextFileSync(file, changelog.toString());
    if (isNew) {
        console.log(green("Generated new file"), file);
    }
    else {
        console.log(green("Updated file"), file);
    }
}
function red(message) {
    return "\u001b[" + 31 + "m" + message + "\u001b[" + 39 + "m";
}
function green(message) {
    return "\u001b[" + 32 + "m" + message + "\u001b[" + 39 + "m";
}
function normalizeUrl(url, https) {
    // remove .git suffix
    url = url.replace(/\.git$/, "");
    // normalize git@host urls
    if (url.startsWith("git@")) {
        url = url.replace(/^git@([^:]+):(.*)$/, (https ? "https" : "http") + "://$1/$2");
    }
    // remove trailing slashes
    url = url.replace(/\/+$/, "");
    return new URL(url);
}
function getRemoteUrl(https = true) {
    try {
        const file = join(dntShim.Deno.cwd(), ".git", "config");
        const content = dntShim.Deno.readTextFileSync(file);
        const data = parseIni(content);
        const url = data?.['remote "origin"']?.url;
        if (!url) {
            return;
        }
        return normalizeUrl(url, https).href;
    }
    catch (err) {
        console.error(red(err.message));
        // Ignore
    }
}
