export declare const parse: typeof decode;
export declare const stringify: typeof encode;
export interface EncodeOptions {
    section?: string;
    whitespace?: boolean;
}
/**
 * Encode the object `object` into an ini-style formatted string. If the
 * optional parameter `section` is given, then all top-level properties
 * of the object are put into this section and the `section`-string is
 * prepended to all sub-sections, see the usage example above.
 *
 * The `options` object may contain the following:
 * - `section` A string which will be the first `section` in the encoded
 *   ini data.  Defaults to none.
 * - `whitespace` Boolean to specify whether to put whitespace around the
 *   `=` character.  By default, whitespace is omitted, to be friendly to
 *   some persnickety old parsers that don't tolerate it well.  But some
 *   find that it's more human-readable and pretty with the whitespace.
 *
 * For backwards compatibility reasons, if a `string` options is passed,
 * then it is assumed to be the `section` value.
 *
 * @param obj Object to encode
 * @param opt Encoding options
 */
export declare function encode(obj: any, opt?: string | EncodeOptions): string;
/**
 * Decode the given ini-style formatted document into a nested object.
 * @param str ini-style document
 */
export declare function decode(str: string): any;
/**
 * Escapes the string `val` such that it is safe to be used as a key or
 * value in an ini-file. Basically escapes quotes. For example:
 *
 * ```javascript
 * ini.safe('"unsafe string"')
 * ```
 *
 * would result in
 *
 * ```javascript
 * "\"unsafe string\""
 * ```
 * @param val String to escape
 */
export declare function safe(val: string | any): string;
/**
 * Unescapes the given string value.
 * @param val String to unescape
 */
export declare function unsafe(val?: string): string;
