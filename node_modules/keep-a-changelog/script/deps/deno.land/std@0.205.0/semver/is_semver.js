"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSemVer = void 0;
// Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
const constants_js_1 = require("./constants.js");
const _shared_js_1 = require("./_shared.js");
/**
 * Checks to see if value is a valid SemVer object. It does a check
 * into each field including prerelease and build.
 *
 * Some invalid SemVer sentinels can still return true such as ANY and INVALID.
 * An object which has the same value as a sentinel but isn't reference equal
 * will still fail.
 *
 * Objects which are valid SemVer objects but have _extra_ fields are still
 * considered SemVer objects and this will return true.
 *
 * A type assertion is added to the value.
 * @param value The value to check to see if its a valid SemVer object
 * @returns True if value is a valid SemVer otherwise false
 */
function isSemVer(value) {
    if (value === null || value === undefined)
        return false;
    if (Array.isArray(value))
        return false;
    if (typeof value !== "object")
        return false;
    if (value === constants_js_1.INVALID)
        return true;
    if (value === constants_js_1.ANY)
        return true;
    const { major, minor, patch, build, prerelease } = value;
    const result = typeof major === "number" && (0, _shared_js_1.isValidNumber)(major) &&
        typeof minor === "number" && (0, _shared_js_1.isValidNumber)(minor) &&
        typeof patch === "number" && (0, _shared_js_1.isValidNumber)(patch) &&
        Array.isArray(prerelease) &&
        Array.isArray(build) &&
        prerelease.every((v) => typeof v === "string" || typeof v === "number") &&
        prerelease.filter((v) => typeof v === "string").every((v) => (0, _shared_js_1.isValidString)(v)) &&
        prerelease.filter((v) => typeof v === "number").every((v) => (0, _shared_js_1.isValidNumber)(v)) &&
        build.every((v) => typeof v === "string" && (0, _shared_js_1.isValidString)(v));
    return result;
}
exports.isSemVer = isSemVer;
