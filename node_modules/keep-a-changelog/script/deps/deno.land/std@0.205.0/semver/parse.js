"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parse = void 0;
const _shared_js_1 = require("./_shared.js");
const is_semver_js_1 = require("./is_semver.js");
const _shared_js_2 = require("./_shared.js");
/**
 * Attempt to parse a string as a semantic version, returning either a `SemVer`
 * object or throws a TypeError.
 * @param version The version string to parse
 * @returns A valid SemVer
 */
function parse(version) {
    if (typeof version === "object") {
        if ((0, is_semver_js_1.isSemVer)(version)) {
            return version;
        }
        else {
            throw new TypeError(`not a valid SemVer object`);
        }
    }
    if (typeof version !== "string") {
        throw new TypeError(`version must be a string`);
    }
    if (version.length > _shared_js_2.MAX_LENGTH) {
        throw new TypeError(`version is longer than ${_shared_js_2.MAX_LENGTH} characters`);
    }
    version = version.trim();
    const r = _shared_js_2.re[_shared_js_2.FULL];
    const m = version.match(r);
    if (!m) {
        throw new TypeError(`Invalid Version: ${version}`);
    }
    // these are actually numbers
    const major = parseInt(m[1]);
    const minor = parseInt(m[2]);
    const patch = parseInt(m[3]);
    if (major > Number.MAX_SAFE_INTEGER || major < 0) {
        throw new TypeError("Invalid major version");
    }
    if (minor > Number.MAX_SAFE_INTEGER || minor < 0) {
        throw new TypeError("Invalid minor version");
    }
    if (patch > Number.MAX_SAFE_INTEGER || patch < 0) {
        throw new TypeError("Invalid patch version");
    }
    // number-ify any prerelease numeric ids
    const numericIdentifier = new RegExp(`^(${_shared_js_2.src[_shared_js_2.NUMERICIDENTIFIER]})$`);
    const prerelease = (m[4] ?? "")
        .split(".")
        .filter((id) => id)
        .map((id) => {
        const num = parseInt(id);
        if (id.match(numericIdentifier) && (0, _shared_js_1.isValidNumber)(num)) {
            return num;
        }
        else {
            return id;
        }
    });
    const build = m[5]?.split(".")?.filter((m) => m) ?? [];
    return {
        major,
        minor,
        patch,
        prerelease,
        build,
    };
}
exports.parse = parse;
